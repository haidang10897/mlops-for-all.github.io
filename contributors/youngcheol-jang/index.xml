<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Youngcheol Jang on</title><link>https://mlops-for-all.github.io/contributors/youngcheol-jang/</link><description>Recent content in Youngcheol Jang on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 22 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mlops-for-all.github.io/contributors/youngcheol-jang/index.xml" rel="self" type="application/rss+xml"/><item><title>3. Components of MLOps</title><link>https://mlops-for-all.github.io/docs/introduction/component/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/docs/introduction/component/</guid><description>Practitioners guide to MLOps # 2021년 5월에 발표된 구글의 white paper : Practitioners guide to MLOps: A framework for continuous delivery and automation of machine learning에서는 MLOps의 핵심 기능들로 다음과 같은 것들을 언급하였습니다.
각 기능이 어떤 역할을 하는지 살펴보겠습니다.
1. Experimentation # 실험(Experimentation)은 머신러닝 엔지니어들이 데이터를 분석하고, 프로토타입 모델을 만들며 학습 기능을 구현할 수 있도록 하는 다음과 같은 기능을 제공합니다.
깃(Git)과 같은 버전 컨트롤 도구와 통합된 노트북(Jupyter Notebook) 환경 제공 사용한 데이터, 하이퍼 파라미터, 평가 지표를 포함한 실험 추적 기능 제공 데이터와 모델에 대한 분석 및 시각화 기능 제공 2.</description></item><item><title>4.3. Install Kubernetes - Kubeadm</title><link>https://mlops-for-all.github.io/docs/setup-kubernetes/kubernetes-with-kubeadm/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/docs/setup-kubernetes/kubernetes-with-kubeadm/</guid><description>1. Prerequisite # 쿠버네티스 클러스터를 구축하기에 앞서, 필요한 구성 요소들을 클러스터에 설치합니다.
Install Prerequisite을 참고하여 Kubernetes를 설치하기 전에 필요한 요소들을 클러스터에 설치해 주시기 바랍니다.
쿠버네티스를 위한 네트워크의 설정을 변경합니다.
sudo modprobe br_netfilter cat &amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.d/k8s.conf br_netfilter EOF cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sudo sysctl --system 2. 쿠버네티스 클러스터 셋업 # kubeadm : kubelet을 서비스에 등록하고, 클러스터 컴포넌트들 사이의 통신을 위한 인증서 발급 등 설치 과정 자동화 kubelet : container 리소스를 실행, 종료를 해 주는 컨테이너 핸들러 kubectl : 쿠버네티스 클러스터를 터미널에서 확인, 조작하기 위한 CLI 도구 다음 명령어를 통해 kubeadm, kubelet, kubectl을 설치합니다.</description></item><item><title>1. What is API Deployment?</title><link>https://mlops-for-all.github.io/docs/api-deployment/what-is-api-deployment/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/docs/api-deployment/what-is-api-deployment/</guid><description>API Deployment란? # 머신러닝 모델을 학습한 뒤에는 어떻게 사용해야 할까요?
머신러닝을 학습할 때는 더 높은 성능의 모델이 나오기를 기대하지만, 학습된 모델을 사용하여 추론을 할 때는 빠르고 쉽게 추론 결과를 받아보고 싶을 것입니다.
모델의 추론 결과를 확인하고자 할 때 주피터 노트북이나 파이썬 스크립트를 통해 학습된 모델을 로드한 뒤 추론할 수 있습니다.
그렇지만 이런 방법은 모델이 클수록 모델을 불러오는 데 많은 시간을 소요하게 되어서 비효율적입니다. 또한 이렇게 이용하면 많은 사람이 모델을 이용할 수 없고 학습된 모델이 있는 환경에서밖에 사용할 수 없습니다.</description></item><item><title>2. Deploy SeldonDeployment</title><link>https://mlops-for-all.github.io/docs/api-deployment/seldon-iris/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/docs/api-deployment/seldon-iris/</guid><description>SeldonDeployment를 통해 배포하기 # 이번에는 학습된 모델이 있을 때 SeldonDeployment를 통해 API Deployment를 해보겠습니다. SeldonDeployment는 쿠버네티스(Kubernetes)에 모델을 REST/gRPC 서버의 형태로 배포하기 위해 정의된 CRD(CustomResourceDefinition)입니다.
1. Prerequisites # SeldonDeployment 관련된 실습은 seldon-deploy라는 새로운 네임스페이스(namespace)에서 진행하도록 하겠습니다. 네임스페이스를 생성한 뒤, seldon-deploy를 현재 네임스페이스로 설정합니다.
kubectl create namespace seldon-deploy kubectl config set-context --current --namespace=seldon-deploy 2. 스펙 정의 # SeldonDeployment를 배포하기 위한 yaml 파일을 생성합니다. 이번 페이지에서는 공개된 iris model을 사용하도록 하겠습니다. 이 iris model은 sklearn 프레임워크를 통해 학습되었기 때문에 SKLEARN_SERVER를 사용합니다.</description></item></channel></rss>