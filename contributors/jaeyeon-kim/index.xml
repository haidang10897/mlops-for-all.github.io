<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jaeyeon Kim on</title><link>https://mlops-for-all.github.io/contributors/jaeyeon-kim/</link><description>Recent content in Jaeyeon Kim on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 13 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mlops-for-all.github.io/contributors/jaeyeon-kim/index.xml" rel="self" type="application/rss+xml"/><item><title>Install Docker</title><link>https://mlops-for-all.github.io/prerequisites/docker/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/prerequisites/docker/install/</guid><description>Docker # 도커 실습을 위해 도커를 설치해야 합니다.
도커 설치는 어떤 OS를 사용하는지에 따라 달라집니다.
각 환경에 맞는 도커 설치는 공식 홈페이지를 참고해주세요.
ubuntu mac windows 설치 확인 # docker run hello-world 가 정상적으로 수행되는 OS, 터미널 환경이 필요합니다.
OS Docker Engine Terminal MacOS Docker Desktop zsh Windows Docker Desktop Powershell Windows Docker Desktop WSL2 Ubuntu Docker Engine bash 들어가기 앞서서.</description></item><item><title>Why Docker &amp; Kubernetes ?</title><link>https://mlops-for-all.github.io/prerequisites/docker/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/prerequisites/docker/introduction/</guid><description>Why Kubernetes ? # 머신러닝 모델을 서비스화하기 위해서는 모델 개발 외에도 많은 부가적인 기능들이 필요합니다.
학습 단계 모델 학습 명령의 스케줄 관리 학습된 모델의 Reproducibility 보장 배포 단계 트래픽 분산 서비스 장애 모니터링 장애 시 트러블슈팅 다행히도 이런 기능들에 대한 needs는 소프트웨어 개발 쪽에서 이미 많은 고민을 거쳐 발전되어 왔습니다.
따라서 머신러닝 모델을 배포할 때도 이런 고민의 결과물들을 활용하면 큰 도움을 받을 수 있습니다.</description></item><item><title>What is Docker?</title><link>https://mlops-for-all.github.io/prerequisites/docker/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/prerequisites/docker/docker/</guid><description>컨테이너 # 컨테이너 가상화 어플리케이션을 어디에서나 동일하게 실행하는 기술 컨테이너 이미지 어플리케이션을 실행시키기 위해 필요한 모든 파일들의 집합 → 붕어빵 틀 컨테이너란? 컨테이너 이미지를 기반으로 실행된 한 개의 프로세스 → 붕어빵 틀로 찍어낸 붕어빵 도커 # 도커는 컨테이너를 관리하고 사용할 수 있게 해주는 플랫폼입니다.
이러한 도커의 슬로건은 바로 Build Once, Run Anywhere 로 어디에서나 동일한 실행 결과를 보장합니다.
도커 내부에서 동작하는 과정을 보자면 실제로 container 를 위한 리소스를 분리하고, lifecycle 을 제어하는 기능은 linux kernel 의 cgroup 등이 수행합니다.</description></item><item><title>4. Why Kubernetes?</title><link>https://mlops-for-all.github.io/docs/introduction/why_kubernetes/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/docs/introduction/why_kubernetes/</guid><description>MLOps &amp;amp; Kubernetes # 그렇다면 MLOps를 이야기할 때, 쿠버네티스(Kubernetes)라는 단어가 항상 함께 들리는 이유가 무엇일까요?
성공적인 MLOps 시스템을 구축하기 위해서는 MLOps의 구성요소 에서 설명한 것처럼 다양한 구성 요소들이 필요하지만, 각각의 구성 요소들이 유기적으로 운영되기 위해서는 인프라 레벨에서 수많은 이슈를 해결해야 합니다.
간단하게는 수많은 머신러닝 모델의 학습 요청을 차례대로 실행하는 것, 다른 작업 공간에서도 같은 실행 환경을 보장해야 하는 것, 배포된 서비스에 장애가 생겼을 때 빠르게 대응해야 하는 것 등의 이슈 등을 생각해볼 수 있습니다.</description></item><item><title>[Practice] Docker command</title><link>https://mlops-for-all.github.io/prerequisites/docker/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/prerequisites/docker/command/</guid><description>1. 정상 설치 확인 # docker run hello-world 정상적으로 설치된 경우 다음과 같은 메시지를 확인할 수 있습니다.
Hello from Docker! This message shows that your installation appears to be working correctly. .... (For ubuntu) sudo 없이 사용하고 싶다면 아래 사이트를 참고합니다.
https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user 2. Docker Pull # docker image registry(도커 이미지를 저장하고 공유할 수 있는 저장소)로부터 Docker image 를 로컬에 다운로드 받는 커맨드입니다.
아래 커맨드를 통해 docker pull에서 사용 가능한 argument들을 확인할 수 있습니다.</description></item><item><title>[Practice] Docker images</title><link>https://mlops-for-all.github.io/prerequisites/docker/images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/prerequisites/docker/images/</guid><description>1. Dockerfile 만들기 # 도커 이미지를 만드는 가장 쉬운 방법은 도커에서 제공하는 템플릿인 Dockerfile을 사용하는 것입니다.
이외에는 running container 를 docker image 로 만드는 docker commit 등을 활용하는 방법이 있습니다.
Dockerfile 사용자가 도커 이미지를 쉽게 만들 수 있도록, 제공하는 템플릿 파일명은 꼭 Dockerfile 이 아니어도 상관없지만, docker build 수행 시, default 로 사용하는 파일명이 Dockerfile 입니다. 도커 이미지를 만드는 docker build 를 수행할 때, -f 옵션을 주면 다른 파일명으로도 사용 가능합니다.</description></item><item><title>[Practice] Docker Advanced</title><link>https://mlops-for-all.github.io/prerequisites/docker/advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/prerequisites/docker/advanced/</guid><description>도커 이미지 잘 만들기 # 도커 이미지를 만들 때 고려해야 될 점 # Dockerfile 을 활용하여 도커 이미지를 만들 때는 명령어의 순서가 중요합니다.
그 이유는 도커 이미지는 여러 개의 Read-Only Layer 로 구성되어있고, 이미지를 빌드할 때 이미 존재하는 레이어는 캐시되어 재사용되기 때문에, 이를 생각해서 Dockerfile 을 구성한다면 빌드 시간을 줄일 수 있습니다.
Dockerfile에서 RUN, ADD, COPY 명령어 하나가 하나의 레이어로 저장됩니다.
예를 들어서 다음과 같은 Dockerfile이 있습니다.
# Layer 1FROMubuntu:latest# Layer 2RUN apt-get update &amp;amp;&amp;amp; apt-get install python3 pip3 -y# Layer 3RUN pip3 install -U pip &amp;amp;&amp;amp; pip3 install torch# Layer 4COPY src/ src/# Layer 5CMD python src/app.</description></item><item><title>1. Introduction</title><link>https://mlops-for-all.github.io/docs/setup-kubernetes/intro/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/docs/setup-kubernetes/intro/</guid><description>MLOps 시스템 구축해보기 # MLOps를 공부하는 데 있어서 가장 큰 장벽은 MLOps 시스템을 구성해보고 사용해보기가 어렵다는 점입니다. AWS, GCP 등의 퍼블릭 클라우드 혹은 Weight &amp;amp; Bias, neptune.ai 등의 상용 툴을 사용해보기에는 과금에 대한 부담이 존재하고, 처음부터 모든 환경을 혼자서 구성하기에는 어디서부터 시작해야 할지 막막하게 느껴질 수밖에 없습니다.
이런 이유들로 MLOps를 선뜻 시작해보지 못하시는 분들을 위해, 모두의 MLOps에서는 우분투가 설치되는 데스크톱 하나만 준비되어 있다면 MLOps 시스템을 밑바닥부터 구축하고 사용해 볼 수 있는 방법을 다룰 예정입니다.</description></item><item><title>2. Setup Kubernetes</title><link>https://mlops-for-all.github.io/docs/setup-kubernetes/kubernetes/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/docs/setup-kubernetes/kubernetes/</guid><description>Setup Kubernetes Cluster # 쿠버네티스를 처음 배우시는 분들에게 첫 진입 장벽은 쿠버네티스 실습 환경을 구축하는 것입니다.
프로덕션 레벨의 쿠버네티스 클러스터를 구축할 수 있게 공식적으로 지원하는 도구는 kubeadm 이지만, 사용자들이 조금 더 쉽게 구축할 수 있도록 도와주는 kubespray, kops 등의 도구도 존재하며, 학습 목적을 위해서 컴팩트한 쿠버네티스 클러스터를 정말 쉽게 구축할 수 있도록 도와주는 k3s, minikube, microk8s, kind 등의 도구도 존재합니다.
각각의 도구는 장단점이 다르기에 사용자마다 선호하는 도구가 다른 점을 고려하여, 본 글에서는 kubeadm, k3s, minikube의 3가지 도구를 활용하여 쿠버네티스 클러스터를 구축하는 방법을 다룹니다.</description></item><item><title>3. Install Prerequisite</title><link>https://mlops-for-all.github.io/docs/setup-kubernetes/install-prerequisite/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/docs/setup-kubernetes/install-prerequisite/</guid><description>이 페이지에서는 쿠버네티스를 설치하기에 앞서, 클러스터와 클라이언트에 설치 혹은 설정해두어야 하는 컴포넌트들에 대한 매뉴얼을 설명합니다.
Install apt packages # 추후 클라이언트와 클러스터의 원활한 통신을 위해서는 Port-Forwarding을 수행해야 할 일이 있습니다. Port-Forwarding을 위해서는 클러스터에 다음 패키지를 설치해 주어야 합니다.
sudo apt-get update sudo apt-get install -y socat Install Docker # 도커 설치에 필요한 APT 패키지들을 설치합니다.
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y ca-certificates curl gnupg lsb-release 도커의 공식 GPG key를 추가합니다.</description></item></channel></rss>