<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SeungTae Kim on</title><link>https://mlops-for-all.github.io/en/contributors/seungtae-kim/</link><description>Recent content in SeungTae Kim on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 22 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mlops-for-all.github.io/en/contributors/seungtae-kim/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Introduction</title><link>https://mlops-for-all.github.io/en/docs/setup-kubernetes/intro/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/en/docs/setup-kubernetes/intro/</guid><description>MLOps 시스템 구축해보기 # MLOps를 공부하는 데 있어서 가장 큰 장벽은 MLOps 시스템을 구성해보고 사용해보기가 어렵다는 점입니다. AWS, GCP 등의 퍼블릭 클라우드 혹은 Weight &amp;amp; Bias, neptune.ai 등의 상용 툴을 사용해보기에는 과금에 대한 부담이 존재하고, 처음부터 모든 환경을 혼자서 구성하기에는 어디서부터 시작해야 할지 막막하게 느껴질 수밖에 없습니다.
이런 이유들로 MLOps를 선뜻 시작해보지 못하시는 분들을 위해, 모두의 MLOps에서는 우분투가 설치되는 데스크톱 하나만 준비되어 있다면 MLOps 시스템을 밑바닥부터 구축하고 사용해 볼 수 있는 방법을 다룰 예정입니다.</description></item><item><title>1. Kubeflow</title><link>https://mlops-for-all.github.io/en/docs/setup-components/install-components-kf/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/en/docs/setup-components/install-components-kf/</guid><description>설치 파일 준비 # Kubeflow v1.4.0 버전을 설치하기 위해서, 설치에 필요한 manifests 파일들을 준비합니다.
kubeflow/manifests Repository 를 v1.4.0 태그로 깃 클론한 뒤, 해당 폴더로 이동합니다.
git clone -b v1.4.0 https://github.com/kubeflow/manifests.git cd manifests 각 구성 요소별 설치 # kubeflow/manifests Repository 에 각 구성 요소별 설치 커맨드가 적혀져 있지만, 설치하며 발생할 수 있는 이슈 혹은 정상적으로 설치되었는지 확인하는 방법이 적혀져 있지 않아 처음 설치하는 경우 어려움을 겪는 경우가 많습니다.
따라서, 각 구성 요소별로 정상적으로 설치되었는지 확인하는 방법을 함께 작성합니다.</description></item><item><title>1. Central Dashboard</title><link>https://mlops-for-all.github.io/en/docs/kubeflow-dashboard-guide/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/en/docs/kubeflow-dashboard-guide/intro/</guid><description>Kubeflow 설치를 완료하면, 다음 커맨드를 통해 대시보드에 접속할 수 있습니다.
kubectl port-forward --address 0.0.0.0 svc/istio-ingressgateway -n istio-system 8080:80 Central Dashboard는 Kubeflow에서 제공하는 모든 기능을 통합하여 제공하는 UI입니다. Central Dashboard에서 제공하는 기능은 크게 왼쪽의 탭을 기준으로 구분할 수 있습니다.
Home Notebooks Tensorboards Volumes Models Experiments(AutoML) Experiments(KFP) Pipelines Runs Recurring Runs Artifacts Executions 그럼 이제 기능별 간단한 사용법을 알아보겠습니다.</description></item><item><title>8. Component - InputPath/OutputPath</title><link>https://mlops-for-all.github.io/en/docs/kubeflow/advanced-component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/en/docs/kubeflow/advanced-component/</guid><description>Complex Outputs # 이번 페이지에서는 Kubeflow Concepts 예시로 나왔던 코드를 컴포넌트로 작성해 보겠습니다.
Component Contents # 아래 코드는 Kubeflow Concepts에서 사용했던 컴포넌트 콘텐츠입니다.
import dill import pandas as pd from sklearn.svm import SVC train_data = pd.read_csv(train_data_path) train_target = pd.read_csv(train_target_path) clf = SVC(kernel=kernel) clf.fit(train_data, train_target) with open(model_path, mode=&amp;#34;wb&amp;#34;) as file_writer: dill.dump(clf, file_writer) Component Wrapper # Define a standalone Python function # 컴포넌트 래퍼에 필요한 Config들과 함께 작성하면 다음과 같이 됩니다.
def train_from_csv( train_data_path: str, train_target_path: str, model_path: str, kernel: str, ): import dill import pandas as pd from sklearn.</description></item><item><title>11. Pipeline - Run Result</title><link>https://mlops-for-all.github.io/en/docs/kubeflow/advanced-run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/en/docs/kubeflow/advanced-run/</guid><description>Run Result # Run 실행 결과를 눌러보면 3개의 탭이 존재합니다. 각각 Graph, Run output, Config 입니다.
Graph # 그래프에서는 실행된 컴포넌트를 누르면 컴포넌트의 실행 정보를 확인할 수 있습니다.
Input/Output # Input/Output 탭은 컴포넌트에서 사용한 Config들과 Input, Output Artifacts를 확인하고 다운로드 받을 수 있습니다.
Logs # Logs에서는 파이썬 코드 실행 중 나오는 모든 stdout을 확인할 수 있습니다. 다만 pod은 일정 시간이 지난 후 지워지기 때문에 일정 시간이 지나면 이 탭에서는 확인할 수 없습니다.</description></item><item><title>12. Component - MLFlow</title><link>https://mlops-for-all.github.io/en/docs/kubeflow/advanced-mlflow/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/en/docs/kubeflow/advanced-mlflow/</guid><description>MLFlow Component # Advanced Usage Component 에서 학습한 모델이 API Deployment까지 이어지기 위해서는 MLFlow에 모델을 저장해야 합니다.
이번 페이지에서는 MLFlow에 모델을 저장할 수 있는 컴포넌트를 작성하는 과정을 설명합니다.
MLFlow in Local # MLFlow에서 모델을 저장하고 서빙에서 사용하기 위해서는 다음의 항목들이 필요합니다.
model signature input_example conda_env 파이썬 코드를 통해서 MLFLow에 모델을 저장하는 과정에 대해서 알아보겠습니다.
1. 모델 학습 # 아래 과정은 iris 데이터를 이용해 SVC 모델을 학습하는 과정입니다.
import pandas as pd from sklearn.</description></item><item><title>2. Deploy SeldonDeployment</title><link>https://mlops-for-all.github.io/en/docs/api-deployment/seldon-iris/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://mlops-for-all.github.io/en/docs/api-deployment/seldon-iris/</guid><description>SeldonDeployment를 통해 배포하기 # 이번에는 학습된 모델이 있을 때 SeldonDeployment를 통해 API Deployment를 해보겠습니다. SeldonDeployment는 쿠버네티스(Kubernetes)에 모델을 REST/gRPC 서버의 형태로 배포하기 위해 정의된 CRD(CustomResourceDefinition)입니다.
1. Prerequisites # SeldonDeployment 관련된 실습은 seldon-deploy라는 새로운 네임스페이스(namespace)에서 진행하도록 하겠습니다. 네임스페이스를 생성한 뒤, seldon-deploy를 현재 네임스페이스로 설정합니다.
kubectl create namespace seldon-deploy kubectl config set-context --current --namespace=seldon-deploy 2. 스펙 정의 # SeldonDeployment를 배포하기 위한 yaml 파일을 생성합니다. 이번 페이지에서는 공개된 iris model을 사용하도록 하겠습니다. 이 iris model은 sklearn 프레임워크를 통해 학습되었기 때문에 SKLEARN_SERVER를 사용합니다.</description></item></channel></rss>